<Window x:Class="DestinyLoadoutTool.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:svg="http://sharpvectors.codeplex.com/runtime/"
        xmlns:svgc="http://sharpvectors.codeplex.com/svgc/"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DestinyLoadoutTool"
        mc:Ignorable="d"
        Title="Destiny Loadout Charger" Height="300" MinHeight="300" Width="1000" MinWidth="1000"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        >

    <Window.Resources>
        <Style x:Key="ComboBoxGrayStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <ToggleButton Grid.Column="2" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" >
                                <ToggleButton.Template>
                                    <ControlTemplate>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="5*" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <Border x:Name="Border"  Grid.ColumnSpan="2" CornerRadius="2" Background="LightGray" BorderBrush="Gray" BorderThickness="1" />
                                            <Path x:Name="Arrow" Grid.Column="1"  Fill="Black" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                                                <Setter TargetName="Border" Property="Background" Value="DarkGray" />
                                            </Trigger>
                                            <Trigger Property="ToggleButton.IsChecked" Value="true">
                                                <Setter TargetName="Border" Property="Background" Value="DarkGray" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>
                            <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="3"  />
                            <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                            <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True"  Focusable="False" PopupAnimation="Slide">
                                <Grid  Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" Background="LightGray" />
                                    <ScrollViewer SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid Margin="10" Height="auto">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"></RowDefinition>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"></ColumnDefinition>
            <ColumnDefinition Width="200"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" >
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">
            <Hyperlink Name="LoginLink" RequestNavigate="LoginRequestNavigate" >Login</Hyperlink>
            <LineBreak/>
            <Hyperlink Click="InstallProtocolButtonClick">Register URI scheme</Hyperlink>            <LineBreak/>
            </TextBlock>
            <TextBox x:Name="Code"></TextBox>
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">
            <Hyperlink Click="ValidateCodeButtonClick">Enter Code</Hyperlink>
            </TextBlock>

        </StackPanel>
        <StackPanel x:Name="CharacterSelection" IsEnabled="False" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Label>Account:</Label>
            <ComboBox Name="profiles" HorizontalAlignment="Center" VerticalAlignment="Center" MinWidth="100" SelectionChanged="ProfilesSelectionChanged" Style="{StaticResource ComboBoxGrayStyle}">
                <ComboBox.ItemTemplate>
                    <ItemContainerTemplate>
                        <Grid VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image Source="{Binding Icon}" Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center"></Image>
                            <TextBlock Grid.Column="1" Text="{Binding Name}" VerticalAlignment="Center" Margin="5,0,0,0"></TextBlock>
                        </Grid>
                    </ItemContainerTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
            <Line Margin="10" Stroke="Black" StrokeThickness="10"></Line>
            <Label>Character:</Label>

            <ComboBox Name="characters" VerticalAlignment="Center" MinWidth="100" Height="56" SelectionChanged="CharacterSelectionChanged">
                <ComboBox.ItemTemplate>
                    <ItemContainerTemplate>
                        <Grid VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="50"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image Source="{Binding Icon}" Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center"></Image>
                            <TextBlock Grid.Column="1" Text="{Binding Name}" VerticalAlignment="Center" Margin="5,0,0,0"></TextBlock>
                        </Grid>
                    </ItemContainerTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </StackPanel>
        <ProgressBar x:Name="LoadingCharacters" Grid.Column="1" IsIndeterminate="True" Height="20" Foreground="LightBlue"></ProgressBar>

        <Grid Grid.Column="2" Height="auto">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"></RowDefinition>
                <RowDefinition Height="20"></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition Height="20"></RowDefinition>

            </Grid.RowDefinitions>
            <ToggleButton Grid.Row="0" Visibility="Collapsed" Height="30" Width="100" Click="ToggleButtonClick" >
                <StackPanel Orientation="Horizontal" >
                    <svgc:SvgViewbox MaxHeight="20" MaxWidth="20">
                        <svgc:SvgViewbox.Style>
                            <Style TargetType="{x:Type svgc:SvgViewbox}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}}" Value="True">
                                        <Setter Property="Source" Value="/Resources/play.svg" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}}" Value="False">
                                        <Setter Property="Source" Value="/Resources/stop.svg" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </svgc:SvgViewbox.Style>
                    </svgc:SvgViewbox>

                    <Label>
                        <Label.Style>
                            <Style TargetType="{x:Type Label}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType=ToggleButton}}" Value="True">
                                        <Setter Property="Content" Value="Enabled" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType=ToggleButton}}" Value="False">
                                        <Setter Property="Content" Value="Disabled" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Label.Style>
                    </Label>
                </StackPanel>
            </ToggleButton>
            <Button Grid.Row="1" Click="ImportDIMLoadouts" Width="100" HorizontalAlignment="Right">Import Loadouts</Button>
            <DataGrid Grid.Row="2" Height="auto" Margin="5" x:Name="LoadoutsGrid" AutoGenerateColumns="False" HeadersVisibility="Column" IsReadOnly="False" CanUserAddRows="False" CanUserDeleteRows="False" ItemsSource="{Binding Path=SelectedCharacterLoadout}">
                <DataGrid.RowStyle>
                    <Style>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=FullLoadout}" Value="False">
                                <Setter Property="Grid.Background" Value="#0F0F0F0F"/>
                                </DataTrigger>
                        </Style.Triggers>
                        <Setter Property="TextBlock.TextAlignment" Value="Center" />
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.Columns>
                    <DataGridCheckBoxColumn Header="" IsReadOnly="False" Width="30" MinWidth="30" Binding="{Binding Selected, Mode=TwoWay}"></DataGridCheckBoxColumn>
                    <DataGridTextColumn Header="Name" IsReadOnly="True" Width="*" MinWidth="100" Binding="{Binding Name}">
                        <DataGridTextColumn.CellStyle>
                            <Style>
                                <Setter Property="TextBlock.TextAlignment" Value="Left"></Setter>
                            </Style>
                        </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <!--<DataGridTextColumn Header="Class" IsReadOnly="True" Width="80" Binding="{Binding ClassType}"></DataGridTextColumn>-->
                    <DataGridTextColumn Header="Equipped" IsReadOnly="True" Width="60" MinWidth="60" Binding="{Binding Equipped.Count}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Unequipped" IsReadOnly="True" Width="80" MinWidth="80" Binding="{Binding Unequipped.Count}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Fashion" IsReadOnly="True" Width="50" MinWidth="50" Binding="{Binding Fashion.Count}"></DataGridTextColumn>
                    <DataGridCheckBoxColumn Header="Weapons" IsReadOnly="True" Width="55" MinWidth="55" Binding="{Binding WeaponsLoadout, Mode=OneWay}"></DataGridCheckBoxColumn>
                    <DataGridCheckBoxColumn Header="Armor" IsReadOnly="True" Width="45" MinWidth="45" Binding="{Binding ArmorLoadout, Mode=OneWay}"></DataGridCheckBoxColumn>
                    <DataGridCheckBoxColumn x:Name="FullLoadout" Header="Full Loadout" IsReadOnly="True" Width="75" MinWidth="75" Binding="{Binding FullLoadout, Mode=OneWay}" ></DataGridCheckBoxColumn>
                </DataGrid.Columns>
            </DataGrid>
            <Button Grid.Row="3" Click="EquipLoadouts" Width="100" HorizontalAlignment="Right">Apply Loadouts</Button>

        </Grid>

        <DataGrid Grid.Row="1" Grid.ColumnSpan="3" Visibility="Hidden"></DataGrid>
        <ProgressBar x:Name="LoadingAll" Grid.Column="0" Grid.ColumnSpan="3" IsIndeterminate="True" Height="20" Foreground="LightBlue" Visibility="Hidden"></ProgressBar>

    </Grid>
</Window>
